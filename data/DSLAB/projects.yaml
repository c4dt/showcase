projects:

    tinynf:
        name: tinyNF
        description: >
          A Simpler and Faster NIC Driver Model for Network Functions
        tech_desc: >
          By merely replacing the state-of-the-art driver with our driver, formal verification of the entire software
          stack completes in 7x less time, while the verified functions’ throughput improves by 160%.
        url: https://dslab.epfl.ch/research/tinynf/
        contacts:
          - name: Solal Pirelli
            email: solal.pirelli@epfl.ch
        tags:
          - Network
          - Software Verification
          - Throughput
        type: Library
        code:
          type: Lab Github
          url: https://github.com/dslab-epfl/tinynf
          date_last_commit: 2021-01-22
        language: C
        license: MIT
        information:
          - type: Paper
            title: "A Simpler and Faster NIC Driver Model for Network Functions"
            url: https://dslab.epfl.ch/pubs/tinynf.pdf
            notes:
              - label: Published in
                text: "Usenix OSDI '20"
                url: https://www.usenix.org/conference/osdi20/presentation/pirelli
        date_added: 2021-01-22
        date_updated: 2021-02-24

# This is the same as the vigor project from NAL
    vigor:
        name: Vigor
        description: Formally verified and performant software Middleboxes
        tech_desc: >
            Software stack and toolchain for building and running software
            middleboxes that are guaranteed to be correct, while providing
            competitive performance and preserving developer productivity. With
            Vigor, developers write the middlebox code (i.e., the software
            network function, or NF) in C atop a standard packet-processing
            framework, putting persistent state in data structures from a
            Vigor-provided library. Vigor then automatically verifies that the
            resulting software stack correctly implements a specification
            (written in Python).
        url: https://vigor-nf.github.io/
        code:
          type: Project Github
          url: https://github.com/vigor-nf/vigor
          date_last_commit: 2021-02-01
        tags:
          - Software Verification
          - Middlebox
          - Network
        information:
          - type: Paper
            title: "Verifying Software Network Functions with No Verification Expertise"
            url: https://dslab.epfl.ch/pubs/vigor.pdf
            notes:
              - label: Published in
                text: "SOSP '19"
                url: https://dl.acm.org/doi/10.1145/3341301.3359647
          - type: Paper
            title: "A Formally Verified NAT Stack"
            url: https://infoscience.epfl.ch/record/264620
          - type: Paper
            title: "A Formally Verified NAT"
            url: https://infoscience.epfl.ch/record/231983
        language: C, Python
        type: Framework
        maturity: 1
        date_added: 2019-07-26
        date_updated: 2021-02-24

    bolt:
        name: Bolt
        description: Performance Contracts for Software Network Functions
        tech_desc: >
          In this work, we propose the notion of performance contracts for NFs. A performance
          contract enables users to predict and scrutinize NF performance at fine granularities
          without having to run them. It provides users with an abstraction that enables them
          to easily parameterize arbitrary input workloads, whether typical, exceptional or
          adversarial.
        url: https://bolt-perf-contracts.github.io/
        code:
          type: Project GitHub
          url: https://github.com/bolt-perf-contracts/bolt
          date_last_commit: 2019-08-05
        contacts:
          - name: Rishabh Iyer
            email: rishabh.iyer@epfl.ch
        tags:
          - Software Network
          - Computer Network
          - Performance
        type: Application
        information:
          - type: Paper
            title: Performance Contracts for Software Network Functions
            url: https://dslab.epfl.ch/pubs/bolt.pdf
            notes:
              - label: Published in
                text: "Usenix NSDI '19"
                url: https://www.usenix.org/conference/nsdi19/presentation/iyer
        date_added: 2021-02-03
        date_updated: 2021-02-24

    cpi:
        name: CPI
        description: Fast and precise control-flow hijack protection
        tech_desc: >
          Code-Pointer Integrity (CPI) is a property of C/C++ programs that guarantees absence
          of control-flow hijack attacks by requiring integrity of all direct and indirect
          pointers to code. Code-Pointer Separation (CPS) is a simplified version of CPI that
          provides strong protection against such attacks in practice. SafeStack is a component
          of CPI/CPS, which can be used independently and protects against stack-based
          control-flow hijacks.
        url: https://dslab.epfl.ch/research/cpi/
        code:
          type: Project GitHub
          url: https://github.com/cpi-llvm
          date_last_commit: 2015-11-16
        contacts:
          - name: http://volodymyrkuznetsov.info/
            url: http://volodymyrkuznetsov.info/
        tags:
          - Computer Network
          - Security
        type: Application
        information:
          - type: Paper
            title: Code-Pointer Integrity
            url: http://dslab.epfl.ch/pubs/cpi.pdf
            notes:
              - label: Published in
                text: "OSDI '14"
                url: https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-kuznetsov.pdf
          - type: Paper
            title: "Missing the pointer"
            url: http://people.csail.mit.edu/rinard/paper/oakland15.pdf
            notes:
              - label: Published in
                text: "Usenix S&P '15"
        date_added: 2019-07-26
        date_updated: 2021-02-24

    s2e:
        name:         s2e
        description:  Platform for writing tools that analyze the properties and behavior of software systems
        layman_desc: >
            S²E is a platform for writing tools that analyze the properties and
            behavior of software systems. S²E comes as a modular library that
            gives virtual machines symbolic execution and program analysis
            capabilities.
        url:          https://s2e.systems/
        code:
            type: Project GitHub
            url:  https://github.com/s2e
            date_last_commit: 2021-01-30
        contacts:
            - name:   Vitaly Chipounov
              email:  vitaly@cyberheaven.io
        tags:
            - Code Analysis
            - Static Code Checking
            - Attack Vectors
        information:
          - type: Paper
            title: "The S2E Platform: Design, Implementation, and Applications"
            url: http://dslab.epfl.ch/pubs/s2e-tocs.pdf
            notes:
              - label: Published in
                text: "TOCs '12"
                url: https://dl.acm.org/doi/10.1145/2110356.2110358
        type: Library
        date_added: 2019-03-18
        date_updated: 2021-02-24

    asap:
        name:         ASAP
        description:  Low overhead software protection
        layman_desc: >
            Makes it possible to use powerful software protection mechanisms at a
            low performance overhead.
        url: https://dslab.epfl.ch/research/asap/
        code:
            type: Lab GitHub
            url:  https://github.com/dslab-epfl/asap
            date_last_commit: 2015-12-03
        contacts:
            - name:   Jonas Wagner
              email:  ltlygwayh@gmail.com
        tags:
            - Software Protection
            - LLVM
            - Buffer Overflows
        type: Library
        information:
          - type: Paper
            title: "High System-Code Security with Low Overhead"
            url: https://dslab.epfl.ch/pubs/asap.pdf
            notes:
              - label: Published in
                text: "IEEE S&P '15"
                url: http://www.ieee-security.org/TC/SP2015/papers-archived/6949a866.pdf
          - type: Poster
            title: "High Security at Low Overhead"
            url: https://dslab.epfl.ch/pubs/asap_poster.pdf
            notes:
              - label: Presented at
                text: "OSDI '14"
                url: https://www.usenix.org/conference/osdi14/poster-sessions
        date_added: 2019-03-18
        date_updated: 2021-02-24

    cloud9:
        name:         Cloud 9
        description:  Scalable symbolic execution
        layman_desc: >
            Parallel symbolic execution engine that scales on shared-nothing
            clusters of commodity hardware.
        url:          http://cloud9.epfl.ch/
        code:
            type: Lab GitHub
            url:  https://github.com/dslab-epfl/cloud9
            date_last_commit: 2013-09-11
        contacts:
            - name:   Stefan Bucur
              email:  stefan.bucur@gmail.com
        tags:
            - Cloud
            - Performance
        information:
          - type: Paper
            title: "Parallel Symbolic Execution for Automated Real-World Software Testing"
            url: http://dslab.epfl.ch/pubs/cloud9.pdf
            notes:
              - label: Published in
                text: "EuroSys 2011"
                url: http://eurosys2011.cs.uni-salzburg.at/pdf/eurosys2011-salomie.pdf
          - type: Paper
            title: "Automated Software Testing as a Service"
            url: https://dslab.epfl.ch/pubs/taas.pdf
            notes:
              - label: Published in
                text: "SoCC 2010"
                url: https://dl.acm.org/doi/proceedings/10.1145/1807128
          - type: Paper
            title: "Cloud9: A Software Testing Service"
            url: http://dslab.epfl.ch/pubs/cloud9-ladis.pdf
            notes:
              - label: Published in
                text: "ACM Operating Systems Review 2009"
                url: https://dl.acm.org/toc/sigops/2010/43/4
        type: Application
        date_added: 2019-03-18
        date_updated: 2021-02-24

    dimmunix:
        name:         Dimmunix
        description:  Protection against deadlock bugs
        layman_desc: >
            Enables general-purpose applications to defend themselves against
            deadlock bugs, i.e. avoid deadlocks that they previously encountered.
        url: https://dslab.epfl.ch/research/dimmunix/
        code:
            type: Google Code
            url:  https://code.google.com/archive/p/dimmunix/
        contacts:
            - name:   Horatiu Jula
              url:    https://www.linkedin.com/in/horatiu-jula-63a02a7
        tags:
            - Deadlock
            - Concurrency
            - Immunity
            - Java
        type: Library
        information:
          - type: Paper
            title: "Platform-wide Deadlock Immunity for Mobile Phones"
            url: https://dslab.epfl.ch/pubs/android_dimmunix.pdf
            notes:
              - label: Published in
                text: "7th HotDep"
                url: http://hotdep2011.cis.upenn.edu/
        date_added: 2019-03-18
        date_updated: 2021-02-24

    failure-sketching:
        name:         Failure Sketching
        description:  Automated debugging technique
        layman_desc: >
            Failure sketching is an automated debugging technique that provides
            developers with an explanation (“failure sketch”) of the root cause
            of a failure that occurred in production. A failure sketch only
            contains program statements that lead to the failure, and it clearly
            shows the differences between failing and successful runs; these
            differences guide developers to the root cause.
        url: https://dslab.epfl.ch/research/gist/
        code:
            type:     Lab GitHub
            url:      https://github.com/dslab-epfl/bugbase
        contacts:
            - name:   Baris Kasici
              email:  barisk@umich.edu
        tags:
            - Debug
            - Failure
            - Verification
        type: Application
        information:
          - type: Paper
            title: "Failure Sketching: A Technique for Automated Root Cause Diagnosis of In-Production Failures"
            url: https://dslab.epfl.ch/pubs/gist.pdf
            notes:
              - label: Published in
                text: "SOSP '15"
                url: https://dl.acm.org/doi/10.1145/2815400.2815412
        date_added: 2019-03-18
        date_updated: 2021-02-24
