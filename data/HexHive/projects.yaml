projects:

    t-fuzz:
        name:         T-Fuzz
        description:  Fuzzing and crash analyzer
        layman_desc: >
            T-Fuzz (transformational fuzzing) improves fuzzing by detecting
            whenever the fuzzer is stuck and then modifying the underlying
            program to reach new program locations. This allows fuzzing to
            discover and test hard to reach code.
        code:
            type: Lab GitHub
            url:  https://github.com/HexHive/T-Fuzz
            date_last_commit: 2018-12-03
        contacts:
            - name:   Mathias Payer
              email:  mathias.payer@epfl.ch
        tags:
            - Fuzzing
            - Debug
            - Failure
        language: Python
        type: Application
        date_added: 2019-03-18
        date_updated: 2020-02-06

    bopc:
        name:         BOPC
        description:  Block Oriented Programming Compiler
        layman_desc: >
            BOPC searches for exploits in the code that can be put together to
            execute new functions, while not tipping off any of the verifications
            in the program. BOPC is a tool that automatically synthesizes
            data-flow exploits based on real programs and real exploits.
        code:
            type: Lab GitHub
            url:  https://github.com/HexHive/BOPC
            date_last_commit: 2019-11-22
        contact:
        contacts:
            - name:   Mathias Payer
              email:  mathias.payer@epfl.ch
        tags:
            - Exploit
            - Code
            - Attack Surface
        language: Python
        type: Application
        information:
            - type:   Paper
              title:  'Block Oriented Programming: Automating Data-Only attacks'
              url:    https://github.com/HexHive/BOPC/blob/master/ccs18_paper.pdf
        date_added: 2019-03-18
        date_updated: 2020-02-06
        
    cfixx:
        name:         CFIXX
        description:  Protection for C++ internal code pointers
        layman_desc: >
            CFIXX is a runtime mitigation that protects C++ programs from attacks
            that overwrite internal data structures containing code pointers.
        code:
            type: Lab GitHub
            url:  https://github.com/HexHive/CFIXX
            date_last_commit: 2018-07-04
        contacts:
            - name:   Mathias Payer
              email:  mathias.payer@epfl.ch
        tags:
            - C++
            - Exploit
            - Protection
        language: C++
        type: Application
        information:
            - type: Paper
              title: 'CFIXX: Object Type Integrity for C++ Virtual Dispatch'
              url: https://nebelwelt.net/publications/files/18NDSS.pdf
        date_added: 2019-03-18
        date_updated: 2020-02-06

    hextype:
        name:         HexType
        description:  Efficient detection of Type Confusion Errors for C++
        layman_desc: >
            HexType is a sanitizer for C++ cast safety. The primary use case is
            during testing to detect type confusion issues in the code.
            Additionally, HexType may be run in a fuzzing environment to detect
            type violations.
        code:
            type: Lab GitHub
            url:  https://github.com/HexHive/HexType
            date_last_commit: 2018-03-26
        contacts:
            - name:   Mathias Payer
              email:  mathias.payer@epfl.ch
        tags:
            - C++
            - Type Safety
            - Sanitization
        language: C++
        type: Application
        date_added: 2019-03-18
        date_updated: 2020-02-06

    retrowrite:
        name: RetroWrite
        description: Retrofitting compiler passes though binary rewriting
        layman_desc: >
          RetroWrite can analyze the security of closed source binaries by applying
          an efficient fuzzying technique that usually only works when the source
          code is available. This makes it possible to trigger more errors than the
          default binary fuzzers available, while being much faster in finding these
          errors.
        code:
          type: Lab GitHub
          url: https://github.com/HexHive/retrowrite
          date_last_commit: 2019-12-30
        contacts:
          - name: Mathias Payer
            email: mathias.payer@epfl.ch
        tags:
          - Binary
          - Fuzzing
          - Efficient
        language: Python
        type: Application
        date_added: 2019-09-02
        information:
          - type: Paper
            title: "Statically Instrumenting COTS Binaries for Fuzzing and Sanitization"
            url: http://hexhive.epfl.ch/publications/files/20Oakland.pdf
        date_updated: 2020-02-06
