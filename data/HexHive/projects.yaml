projects:

  fuzzan:
    name: FuZZan
    description: Enabling a faster Address Sanitization, improving fuzzing speed by 2x
    tech_desc: >
      Our evaluation shows that on the Google fuzzer test suite, FuZZan improves fuzzing throughput over ASan by 48%
      starting with Google’s provided seeds (52% when starting with empty seeds on the same applications). Due to this
      improved throughput, FuZZan discovers 13% more unique paths given the same 24 hours and finds bugs 42% faster
    tags:
      - Fuzzing
    type: Application
    code:
      type: Lab Github
      url:  https://github.com/HexHive/FuZZan
      date_last_commit: 2020-08-01
    language: C++
    information:
      - type: Paper
        title: "FuZZan: Efficient Sanitizer Metadata Design for Fuzzing"
        url: https://hexhive.epfl.ch/publications/files/20ATC.pdf
        notes:
          - label: Published at
            text: Usenix ATC '20
            url: https://www.usenix.org/conference/atc20/presentation/jeon
    date_added: 2021-03-05
    date_updated: 2021-03-05

  usbfuzz:
    name: USBFuzz
    description: "Virtual environment for fuzzing USB peripherals"
    tech_desc: >
      Fuzzing USB peripherals for Linux, Android, MacOS, Windows, FreeBSD
      Found lots of 0days in modern kernels, allowing arbitrary compromise
    tags:
      - Fuzzing
      - USB
      - Linus
    type: Application
    code:
      type: Lab Github
      url:  https://github.com/HexHive/USBFuzz
      date_last_commit: 2020-10-14
    language: C
    information:
      - type: Paper
        title: "USBFuzz: A Framework for Fuzzing USB Drivers by Device Emulation"
        url: https://hexhive.epfl.ch/publications/files/20SEC3.pdf
        notes:
          - label: Published at
            text: Usenix S&P '20
            url: https://www.usenix.org/conference/usenixsecurity20/presentation/peng
    date_added: 2021-03-05
    date_updated: 2021-03-05

  magma:
    name: Magma
    description: A Ground-Truth Fuzzing Benchmark
    tech_desc: >
      Magma is a collection of open-source libraries with widespread usage and a long history of security-critical
      bugs and vulnerabilities. In light of the need for better fuzzer evaluation, we front-ported bugs from
      previous bug reports to the latest versions of these libraries.

      For each ported bug, we added in-line (source-code-level) instrumentation to collect ground-truth
      information about bugs reached (buggy code executed) and triggered (fault condition satisfied by input).
      This instrumentation allows a monitoring utility to measure fuzzer progress in real time.
    url: https://hexhive.epfl.ch/magma/
    tags:
      - Fuzzing
      - Ground-truth
      - Benchmark
    type: Application
    code:
      type: Lab Github
      url: https://github.com/HexHive/magma
      date_last_commit: 2020-12-17
    information:
      - type: Paper
        title: "Magma: A Ground-Truth Fuzzing Benchmark"
        url: https://arxiv.org/abs/2009.01120
        notes:
          - label: Published at
            text: SIGMETRICS 2021
            url: http://www.sigmetrics.org/sigmetrics2021
    date_added: 2020-02-21
    date_updated: 2021-02-26

  t-fuzz:
    name: T-Fuzz
    description: Fuzzing and crash analyzer
    layman_desc: >
      T-Fuzz (transformational fuzzing) improves fuzzing by detecting
      whenever the fuzzer is stuck and then modifying the underlying
      program to reach new program locations. This allows fuzzing to
      discover and test hard to reach code.
    code:
      type: Lab GitHub
      url: https://github.com/HexHive/T-Fuzz
      date_last_commit: 2018-12-04
    tags:
      - Fuzzing
      - Debug
      - Failure
    language: Python
    type: Application
    information:
      - type: Paper
        title: "T-Fuzz: fuzzing by program transformation"
        url: http://hexhive.epfl.ch/publications/files/18Oakland.pdf
        notes:
          - label: Published at
            text: SP 2018
            url: https://ieeexplore.ieee.org/document/8418632
    date_added: 2019-03-18
    date_updated: 2021-02-26

  bopc:
    name: BOPC
    description: Block Oriented Programming Compiler
    layman_desc: >
      BOPC searches for exploits in the code that can be put together to
      execute new functions, while not tipping off any of the verifications
      in the program. BOPC is a tool that automatically synthesizes
      data-flow exploits based on real programs and real exploits.
    code:
      type: Lab GitHub
      url: https://github.com/HexHive/BOPC
      date_last_commit: 2020-11-05
    tags:
      - Exploit
      - Code
      - Attack Surface
    language: Python
    type: Application
    information:
      - type: Paper
        title: "Block Oriented Programming: Automating Data-Only attacks"
        url: https://github.com/HexHive/BOPC/blob/master/ccs18_paper.pdf
        notes:
          - label: Published at
            text: CCS 2018
            url: https://dl.acm.org/doi/10.1145/3243734.3243739
    date_added: 2019-03-18
    date_updated: 2021-02-26

  cfixx:
    name: CFIXX
    description: Protection for C++ internal code pointers
    layman_desc: >
      CFIXX is a runtime mitigation that protects C++ programs from attacks
      that overwrite internal data structures containing code pointers.
    code:
      type: Lab GitHub
      url: https://github.com/HexHive/CFIXX
      date_last_commit: 2018-07-04
    tags:
      - C++
      - Exploit
      - Protection
    language: C++
    type: Application
    information:
      - type: Paper
        title: "CFIXX: Object Type Integrity for C++ Virtual Dispatch"
        url: https://nebelwelt.net/publications/files/18NDSS.pdf
        notes:
          - label: Published at
            text: NDSS 2018
            url: https://www.ndss-symposium.org/ndss2018
    date_added: 2019-03-18
    date_updated: 2021-02-26

  hextype:
    name: HexType
    description: Efficient detection of Type Confusion Errors for C++
    layman_desc: >
      HexType is a sanitizer for C++ cast safety. The primary use case is
      during testing to detect type confusion issues in the code.
      Additionally, HexType may be run in a fuzzing environment to detect
      type violations.
    code:
      type: Lab GitHub
      url: https://github.com/HexHive/HexType
      date_last_commit: 2020-08-27
    tags:
      - C++
      - Type Safety
      - Sanitization
    language: C++
    type: Application
    information:
      - type: Paper
        title: "HexType: Efficient Detection of Type Confusion Errors for C++"
        url: http://hexhive.epfl.ch/publications/files/17CCS.pdf
        notes:
          - label: Published at
            text: CCS 2017
            url: https://ccs2017.sigsac.org
    date_added: 2019-03-18
    date_updated: 2021-02-26

  retrowrite:
    name: RetroWrite
    description: Retrofitting compiler passes though binary rewriting
    layman_desc: >
      RetroWrite can analyze the security of closed source binaries by applying
      an efficient fuzzing technique that usually only works when the source
      code is available. This makes it possible to trigger more errors than the
      default binary fuzzers available, while being much faster in finding these
      errors.
    code:
      type: Lab GitHub
      url: https://github.com/HexHive/retrowrite
      date_last_commit: 2021-01-25
    tags:
      - Binary
      - Fuzzing
      - Efficient
    language: Python
    type: Application
    information:
      - type: Paper
        title: "RetroWrite: Statically Instrumenting COTS Binaries for Fuzzing and Sanitization"
        url: http://hexhive.epfl.ch/publications/files/20Oakland.pdf
        notes:
          - label: Published at
            text: Oakland 2020
            url: https://ieeexplore.ieee.org/document/9152762
    date_added: 2019-09-02
    date_updated: 2021-02-26

  shadowstack:
    name: ShadowStack
    description: LLVM Implementation of different ShadowStack schemes for x86_64
    layman_desc: >
      In computer security, a shadow stack is a mechanism for protecting
      a procedure's stored return address, such as from a stack buffer
      overflow. The shadow stack itself is a second, separate stack that
      \"shadows\" the program call stack. In the function prologue, a
      function stores its return address to both the call stack and the
      shadow stack. In the function epilogue, a function loads the return
      address from both the call stack and the shadow stack, and then
      compares them. If the two records of the return address differ,
      then an attack is detected; the typical course of action is simply
      to terminate the program or alert system administrators about a
      possible intrusion attempt.
    code:
      type: Lab GitHub
      url: https://github.com/HexHive/ShadowStack
      date_last_commit: 2020-05-02
    tags:
      - Binary
      - Protection
    language: C, assembly
    type: Application
    information:
      - type: Paper
        title: "SoK: Shining Light on Shadow Stacks"
        url: http://hexhive.epfl.ch/publications/files/19Oakland.pdf
        notes:
          - label: Published at
            text: Oakland 2019
            url: https://ieeexplore.ieee.org/document/8835389
    date_added: 2020-02-21
    date_updated: 2021-02-26

  hexpads:
    name: HexPADS
    description: Host-based, Performance-counter-based Attack Detection System
    layman_desc: >
      Attacks change the execution behavior of a system. Our attack
      detection system HexPADS detects attacks through divergences from
      normal behavior using attack signatures. HexPADS collects
      information from the operating system on runtime performance
      metrics with measurements from hardware performance counters for
      individual processes. Cache behavior is a strong indicator of
      ongoing attacks like rowhammer, side channels, covert channels, or
      CAIN attacks. Collecting performance metrics across all running
      processes allows the correlation and detection of these attacks. In
      addition, HexPADS can mitigate the attacks or significantly reduce
      their effectiveness with negligible overhead to benign processes.
    code:
      type: Lab GitHub
      url: https://github.com/HexHive/HexPADS
      date_last_commit: 2016-01-07
    tags:
      - Intrusion Detection
      - Protection
    language: C
    type: Application
    information:
      - type: Paper
        title: "HexPADS: a platform to detect “stealth” attacks"
        url: http://hexhive.epfl.ch/publications/files/16ESSoS.pdf
        notes:
          - label: Published at
            text: ESSoS 2016
            url: https://dl.acm.org/conference/essos
    date_added: 2020-02-21
    date_updated: 2021-02-26

  fuzzgen:
    name: FuzzGen
    description: Automatic Fuzzer Generation
    layman_desc: >
      FuzzGen is a tool for automatically synthesizing fuzzers for complex
      libraries in a given environment. From a given library, it allow for
      creating a dedicated fuzzer, aiming at good code coverage, without
      human interaction.
    code:
      type: Lab GitHub
      url: https://github.com/HexHive/FuzzGen
      date_last_commit: 2020-11-30
    tags:
      - Fuzzing
      - Debug
      - Failure
    type: Application
    information:
      - type: Paper
        title: "FuzzGen: Automatic Fuzzer Generation"
        url: http://hexhive.epfl.ch/publications/files/20SEC.pdf
        notes:
          - label: Published at
            text: SEC 2020
            url: https://www.usenix.org/conference/usenixsecurity20
    date_added: 2020-02-21
    date_updated: 2021-02-26

  datashield:
    name: DataShield
    description: Configurable data confidentiality and integrity
    layman_desc: >
      DataShield can, based on C/C++ languages annotation, protect
      unwanted access to secret data. By securing only theses
      datastructures, performance overhead is greatly reduced.
    code:
      type: Lab GitHub
      url: https://github.com/HexHive/datashield
      date_last_commit: 2021-01-01
    tags:
      - Privacy
      - Efficient
      - Confidentiality
    language: C++
    type: Library
    information:
      - type: Paper
        title: "DataShield: Configurable Data Confidentiality and Integrity"
        url: http://hexhive.epfl.ch/publications/files/17AsiaCCS.pdf
        notes:
          - label: Published at
            text: AsiaCCS 2017
            url: https://dl.acm.org/doi/10.1145/3052973.3052983
    date_added: 2020-02-21
    date_updated: 2021-02-26

  halucinator:
    name: HALucinator
    description: Firmware Re-hosting Through Abstraction Layer Emulation
    layman_desc: >
      HALucinator allow for running a firmware outside of its physical
      implementation. When extracting it, one can recreate the same
      environment as the one used by the firmware's developer thus
      allowing for faster exploitation.
    code:
      type: Lab GitHub
      url: https://github.com/embedded-sec/halucinator
      date_last_commit: 2020-10-27
    tags:
      - Binary
      - Exploit
      - Debug
    language: Python
    type: Application
    information:
      - type: Paper
        title: "HALucinator: Firmware Re-hosting Through Abstraction Layer Emulation"
        url: http://hexhive.epfl.ch/publications/files/20SEC2.pdf
        notes:
          - label: Published at
            text: SEC 2020
            url: https://www.usenix.org/conference/usenixsecurity20
    date_added: 2020-02-24
    date_updated: 2021-02-26
    maturity: 1

  benchiot:
    name: BenchIoT
    description: Security benchmarks for the Internet of Things
    layman_desc: >
      BenchIoT enables automatic evaluation of 14 metrics covering
      security, performance, memory usage, and energy consumption.
      Having a sound benchmark focused on IoT allow for robust and
      comparable metrics.
    code:
      type: Lab GitHub
      url: https://github.com/embedded-sec/BenchIoT
      date_last_commit: 2020-11-11
    tags:
      - Benchmark
      - IoT
    language: C
    type: Application
    information:
      - type: Paper
        title: "BenchIoT: Security benchmarks for the Internet of Things"
        url: http://hexhive.epfl.ch/publications/files/19DSN.pdf
        notes:
          - label: Published at
            text: DSN 2019
            url: https://ieeexplore.ieee.org/document/8809492
    maturity: 1
    date_added: 2020-02-24
    date_updated: 2021-02-26

  freegaen:
    name: Free GAEN alternative
    description: Alternative to GAEN for contact tracing applications
    layman_desc: >
      Apple and Google developed the Google-Apple Exposure Notification
      system in order to provide a uniform API for contact-tracing apps
      while preserving user privacy. On Android, GAEN is integrated in
      the Google Play services, which is proprietary. As a consequence,
      users wanting to keep a free system, as well as phone manufacturers
      such as Huawei who don't have Google Play services cannot use these
      applications.
      This project aims to offer an alternative framework, based on
      open-source code, which requires only minimal changes to the apps.
    code:
      type: C4DT GitHub
      url: https://github.com/c4dt/dp3t-app-android-ch/tree/microg-nearby
      date_last_commit: 2021-03-01
    contacts:
      - name: Mathias Payer
        email: mathias.payer@epfl.ch
      - name: Daniele Antonioli
        email: daniele.antonioli@epfl.ch
      - name: Christian Grigis
        email: christian.grigis@epfl.ch
    tags:
      - Privacy-enhancing
      - Protocol
      - GAEN
      - COVID
    language: Java, Kotlin
    type: Application, Library, Framework
    license: MPL-2.0
    maturity: 1
    in_incubator: true
    c4dt_contact:
      name: Christian Grigis
      email: christian.grigis@epfl.ch
    c4dt_work: >
      After analyzing the various possibilities to replace GAEN, and
      examining the current related projects, we focused our work on
      collaborating with microG, a Free Software project dedicated to
      replacing all of GMS. This effort resulted in a way to use microG's
      contact tracing subset as a library, so that it can be bundled with
      an existing app without source code modification, and without other
      dependencies.
      We produced a version of SwissCovid that uses this approach to run
      on any phone that does not have access to Google Play services.
    date_added: 2020-10-05
    date_updated: 2021-03-01

  lightblue:
    name: LightBlue
    description: "LightBlue: Automatic Profile-Aware Debloating of Bluetooth Stacks"
    layman_desc: >
      The Bluetooth standard is complex, many commands are defined but
      aren't needed in many use cases. It allows for a big surface attack
      which can be cumbersome to correctly reduce.
      LightBlue allows to, based on Bluetooth usage profiling, to reduce
      the number of exposed commands understood by the firmware and the
      runtime, thus greatly reducing the potential future attacks that
      might arise.
    url: https://github.com/purseclab/lightblue
    tags:
      - Attack Surface
      - Bluetooth
      - Profile
    type: Application
    code:
      type: Lab Github
      url: https://github.com/purseclab/lightblue
      date_last_commit: 2021-02-23
    date_added: 2020-02-26
    date_updated: 2021-02-26
