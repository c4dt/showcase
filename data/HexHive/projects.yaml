projects:

    t-fuzz:
        name:         T-Fuzz
        description:  Fuzzing and crash analyzer
        layman_desc: >
            T-Fuzz (transformational fuzzing) improves fuzzing by detecting
            whenever the fuzzer is stuck and then modifying the underlying
            program to reach new program locations. This allows fuzzing to
            discover and test hard to reach code.
        code:
            type: Lab GitHub
            url:  https://github.com/HexHive/T-Fuzz
            date_last_commit: 2018-12-03
        contacts:
            - name:   Mathias Payer
              email:  mathias.payer@epfl.ch
        tags:
            - Fuzzing
            - Debug
            - Failure
        language: Python
        type: Application
        date_added: 2019-03-18
        date_updated: 2020-02-06

    bopc:
        name:         BOPC
        description:  Block Oriented Programming Compiler
        layman_desc: >
            BOPC searches for exploits in the code that can be put together to
            execute new functions, while not tipping off any of the verifications
            in the program. BOPC is a tool that automatically synthesizes
            data-flow exploits based on real programs and real exploits.
        code:
            type: Lab GitHub
            url:  https://github.com/HexHive/BOPC
            date_last_commit: 2019-11-22
        contact:
        contacts:
            - name:   Mathias Payer
              email:  mathias.payer@epfl.ch
        tags:
            - Exploit
            - Code
            - Attack Surface
        language: Python
        type: Application
        information:
            - type:   Paper
              title:  'Block Oriented Programming: Automating Data-Only attacks'
              url:    https://github.com/HexHive/BOPC/blob/master/ccs18_paper.pdf
        date_added: 2019-03-18
        date_updated: 2020-02-06
        
    cfixx:
        name:         CFIXX
        description:  Protection for C++ internal code pointers
        layman_desc: >
            CFIXX is a runtime mitigation that protects C++ programs from attacks
            that overwrite internal data structures containing code pointers.
        code:
            type: Lab GitHub
            url:  https://github.com/HexHive/CFIXX
            date_last_commit: 2018-07-04
        contacts:
            - name:   Mathias Payer
              email:  mathias.payer@epfl.ch
        tags:
            - C++
            - Exploit
            - Protection
        language: C++
        type: Application
        information:
            - type: Paper
              title: 'CFIXX: Object Type Integrity for C++ Virtual Dispatch'
              url: https://nebelwelt.net/publications/files/18NDSS.pdf
        date_added: 2019-03-18
        date_updated: 2020-02-06

    hextype:
        name:         HexType
        description:  Efficient detection of Type Confusion Errors for C++
        layman_desc: >
            HexType is a sanitizer for C++ cast safety. The primary use case is
            during testing to detect type confusion issues in the code.
            Additionally, HexType may be run in a fuzzing environment to detect
            type violations.
        code:
            type: Lab GitHub
            url:  https://github.com/HexHive/HexType
            date_last_commit: 2018-03-26
        contacts:
            - name:   Mathias Payer
              email:  mathias.payer@epfl.ch
        tags:
            - C++
            - Type Safety
            - Sanitization
        language: C++
        type: Application
        date_added: 2019-03-18
        date_updated: 2020-02-06

    retrowrite:
        name: RetroWrite
        description: Retrofitting compiler passes though binary rewriting
        layman_desc: >
          RetroWrite can analyze the security of closed source binaries by applying
          an efficient fuzzying technique that usually only works when the source
          code is available. This makes it possible to trigger more errors than the
          default binary fuzzers available, while being much faster in finding these
          errors.
        code:
          type: Lab GitHub
          url: https://github.com/HexHive/retrowrite
          date_last_commit: 2019-12-30
        contacts:
          - name: Mathias Payer
            email: mathias.payer@epfl.ch
        tags:
          - Binary
          - Fuzzing
          - Efficient
        language: Python
        type: Application
        date_added: 2019-09-02
        information:
          - type: Paper
            title: "Statically Instrumenting COTS Binaries for Fuzzing and Sanitization"
            url: http://hexhive.epfl.ch/publications/files/20Oakland.pdf
        date_updated: 2020-02-06

    magma:
        name: Magma
        description: Ground-Truth Fuzzing Benchmark
        layman_desc: >
            Magma is a collection of open-source libraries with widespread
            usage and a long history of security-critical bugs and
            vulnerabilities. In light of the need for better fuzzer evaluation,
            we front-ported bugs from previous bug reports to the latest
            versions of these libraries, which are constantly being updated
            with new patches and features, possibly introducing even more
            undiscovered bugs. This last fact allows us to continuously update
            Magma with new bugs as they are reported, instead of using old
            stale versions of the libraries.
        code:
          type: Lab GitHub
          url: https://github.com/HexHive/magma2
          date_last_commit: 2020-02-19
        contacts:
          - name: Mathias Payer
            email: mathias.payer@epfl.ch
        tags:
          - Binary
          - Fuzzing
          - Benchmark
        language: C
        type: Application
        date_added: 2020-02-21
        date_updated: 2020-02-21

    lmem:
        name: LMEM
        description: Framework for lightweight memory tracing
        layman_desc: >
            LMEM is a lightweight memory tracing technique that builds on
            dynamic on-the-fly cross-ISA binary translation of 32-bit code to
            64-bit code. Our software-only approach enables memory tracing for
            unmodified, binary-only x86 applications using the x64 extension
            that is available in current CPUs; no OS extensions or special
            hardware is required. The additional registers in x64 and the wider
            memory addressing enable a low-overhead tracing infrastructure that
            is protected from the application code (i.e., uses disjunct
            registersand memory regions). MemTrace handles multi-threaded
            applications. Two case studies discuss a framework for unlimited
            read and write watchpoints and an allocation-based memorychecker
            similar in functionality to memgrind.
        code:
          type: Lab GitHub
          url: https://github.com/HexHive/memTrace
          date_last_commit: 2020-01-05
        contacts:
          - name: Mathias Payer
            email: mathias.payer@epfl.ch
        tags:
          - Binary
          - Tracing
        language: C, assembly
        type: Application
        date_added: 2020-02-21
        information:
          - type: Paper
            title: Lightweight Memory Tracing
            url: https://nebelwelt.net/publications/files/13ATC.pdf
        date_updated: 2020-02-21

    shadowstack:
        name: ShadowStack
        description: LLVM Implementation of different ShadowStack schemes for x86_64
        layman_desc: >
            In computer security, a shadow stack is a mechanism for protecting
            a procedure's stored return address, such as from a stack buffer
            overflow. The shadow stack itself is a second, separate stack that
            "shadows" the program call stack. In the function prologue, a
            function stores its return address to both the call stack and the
            shadow stack. In the function epilogue, a function loads the return
            address from both the call stack and the shadow stack, and then
            compares them. If the two records of the return address differ,
            then an attack is detected; the typical course of action is simply
            to terminate the program or alert system administrators about a
            possible intrusion attempt.
        code:
          type: Lab GitHub
          url: https://github.com/HexHive/ShadowStack
          date_last_commit: 2019-06-28
        contacts:
          - name: Mathias Payer
            email: mathias.payer@epfl.ch
        tags:
          - Binary
          - Protection
        language: C, assembly
        type: Application
        date_added: 2020-02-21
        date_updated: 2020-02-21

    hexpads:
        name: HexPADS
        description: Framework for lightweight memory tracing
        layman_desc: >
            Attacks change the execution behavior of a system. Our attack
            detection system HexPADS detects attacks through divergences from
            normal behavior using attack signatures. HexPADS collects
            information from the operating system on runtime performance
            metrics with measurements from hardware performance counters for
            individual processes. Cache behavior is a strong indicator of
            ongoing attacks like rowhammer, side channels, covert channels, or
            CAIN attacks. Collecting performance metrics across all running
            processes allows the correlation and detection of these attacks. In
            addition, HexPADS can mitigate the attacks or significantly reduce
            their effectiveness with negligible overhead to benign processes.
        code:
          type: Lab GitHub
          url: https://github.com/HexHive/HexPADS
          date_last_commit: 2016-01-07
        contacts:
          - name: Mathias Payer
            email: mathias.payer@epfl.ch
        tags:
          - Intrusion Detection
          - Protection
        language: C
        type: Application
        date_added: 2020-02-21
        information:
          - type: Paper
            title: 'HexPADS: a platform to detect “stealth” attacks'
            url: http://hexhive.epfl.ch/publications/files/16ESSoS.pdf
        date_updated: 2020-02-21

    libdetox:
        name: Lockdown
        description: Transparent hardening of binary applications at run-time
        layman_desc: >
            Lockdown is a run-time environment for x86 32bit ELF binaries that
            transparently hardens binary applications at run-time against the
            exploitation of memory corruption vulnerabilities. Lockdown
            implements a fine-grained CFI policy for jumps and calls. Return
            instructions are secured over a practical shadow stack. Furthermore
            Lockdown has its own ELF dynamic loader that loads ELF binaries
            (executables and shared libraries).
            Lockdown is a flavor of TRuE (Trusted Run-TimE) which itself is
            based on fastBT, secureLoader and libdetox.
        code:
          type: Lab GitHub
          url: https://github.com/HexHive/libdetox
          date_last_commit: 2019-01-17
        contacts:
          - name: Mathias Payer
            email: mathias.payer@epfl.ch
        tags:
          - Binary
          - Protection
        language: C
        type: Library
        date_added: 2020-02-21
        information:
          - type: Paper
            title: Fine-Grained Control-Flow Integrity through Binary Hardening
            url: https://nebelwelt.net/publications/files/15DIMVA.pdf
        date_updated: 2020-02-21
